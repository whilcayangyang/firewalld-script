#!/bin/bash

#Color & Formatting
end=$'\e[0m'
bold=$'\e[1m'
red=$'\e[91m'
std='\033[0;0;39m'

zone="high-security" # DO NOT CHANGE
target="DROP" # Target value: DROP or REJECT

# Check missing package
if rpm -qa | grep neofetch > /dev/null; then
    echo ""
else echo "Installing prerequisite...."; sleep 1
    sudo dnf install neofetch -y
fi    

clear
echo -e "Checking firewalld configuration..."; sleep 1
if firewall-cmd --get-zones | grep $zone > /dev/null; then
    echo -e "success"; sleep 1

else echo -e "applying default config...\b"; sleep 2; echo -e "Done"; sleep 1
    firewall-cmd --permanent --new-zone=$zone
    firewall-cmd --permanent --zone=$zone --set-target=$target
    firewall-cmd --set-log-denied=unicast
    firewall-cmd --reload
    firewall-cmd --set-default-zone=$zone

fi

pause(){
  read -p "Press [Enter] key to continue..." fackEnterKey
}

function main_menu {
option=0
    until [ "$option" = "9" ]; do
        clear
        neofetch --color_blocks off
        echo ""
        echo "  1.) Add Services"
        echo "  2.) Add Port Number"
        echo "  3.) Enable/Disable ICMP Request"
        echo "  4.) Whitelist IP"
        echo "  5.) Blacklist IP"
        echo "  6.) Get Logs Denied"
        echo "  7.) Panic mode"
        echo "  8.) Zone Information"
        echo "  9.) Quit"
        echo ""
        echo -n " ${bold}Enter choice [${end} 1 - 9 ${end}${bold}]: ${end}"
        read option
        case $option in
            1 ) add_services ;;
            2 ) add_portnumber ;;
            3 ) en_dis_icmp ;;
            4 ) whitelist_ip ;;
            5 ) blacklist_ip ;;
            6 ) get_logs ; pause ;;
    	    7 ) panic_mode ;;
    	    8 ) info_zone ; pause ;;
            9 ) echo -e "\nexiting....";sleep 2 ;clear ; exit 0;;
            * ) echo -e " ${red}${bold}invalid option...${end}" && sleep 2
        esac
        
    done
}

    #1. Add Services"
    function add_services {
        option=0
        until [ "$option" = "3" ]; do
        clear
        neofetch --color_blocks off
        echo ""
        echo "  1.) Add Services [permanent]"
        echo "  2.) Add Services [time interval]"
        echo "  3.) Back"
        echo ""
        echo -n "${bold}Enter choice [ 1 - 3 ]: ${end}"
        read option
        case $option in
            1 ) add_services_p ;;
            2 ) add_services_t ;;
            3 ) main_menu ;;
            * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
        esac
    done
    }  

        function add_services_p {
        read -p "Enter permanent services (eg: ftp, ssh, http): " service
        firewall-cmd --permanent --zone=$zone --add-service=$service
        firewall-cmd --reload

        while true; do
            read -p "Would you like to add another services [Yy/Nn]?" yn
            case $yn in
                [Yy] ) add_services_p;;
                [Nn] ) add_services;;
                * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
            esac
        done
        }

        function add_services_t {
        read -p "Enter temporary services (eg: ftp, ssh, http): " service
        read -p "Enter timeout (eg: 20m = 20 minutes, 2h = 2 hours): " timeval
        firewall-cmd --zone=$zone --add-service=$service --timeout=$timeval

        while true; do
            read -p "Would you like to add another services [Yy/Nn]?" yn
            case $yn in
                [Yy] ) add_services_t;;
                [Nn] ) add_services;;
                * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
            esac
        done
        }
            
    #2.) Add Port Number
    function add_portnumber {
        option=0
        until [ "$option" = "3" ]; do
        clear
        neofetch --color_blocks off
        echo ""
        echo "  1.) Add Port/Protocol [permanent]"
        echo "  2.) Add Port/Protocol [time interval]"
        echo "  3.) Back"
        echo ""
        echo -n "${bold}Enter choice [ 1 - 3 ]: ${end}"
        read option
        case $option in
            1 ) add_portnumber_p ;;
            2 ) add_portnumber_t ;;
            3 ) main_menu ;;
            * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
        esac
    done
    }  

        function add_portnumber_p {
        read -p "Enter port number (eg: 80, 443, or 53): " pnumber
        read -p "Enter protocol (eg: tcp or udp): " protocol
        firewall-cmd --permanent --zone=$zone --add-port=$pnumber/$protocol
        firewall-cmd --reload

        while true; do
            read -p "Would you like to add another port [Yy/Nn]?" yn
            case $yn in
                [Yy] ) add_portnumber_p;;
                [Nn] ) add_portnumber;;
                * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
            esac
        done
        }

        function add_portnumber_t {
        read -p "Enter port number (eg: 80, 443, or 53): " pnumber
        read -p "Enter protocol (eg: tcp or udp): " protocol
        read -p "Enter timeout (eg: 20m = 20 minutes, 2h = 2 hours): " timeval
        firewall-cmd --zone=$zone --add-port=$pnumber/$protocol --timeout=$timeval

        while true; do
            read -p "Would you like to add another port [Yy/Nn]?" yn
            case $yn in
                [Yy] ) add_portnumber_t;;
                [Nn] ) add_portnumber;;
                * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
            esac
        done
        }
    

    #3.) Enable/Disable ICMP Request
    function en_dis_icmp {
        option=0
        until [ "$option" = "3" ]; do
        clear
        neofetch --color_blocks off
        echo ""
        echo "  1.) Enable ICMP Request"
        echo "  2.) Disable ICMP Request"
        echo "  3.) Back"
        echo ""
        echo -n "${bold}Enter choice [ 1 - 7 ]: ${end}"
        read option
        case $option in
            1 ) en_icmp ; pause ;;
            2 ) dis_icmp ; pause ;;
            3 ) main_menu ;;
            * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
        esac
    done
    }  

        function en_icmp {
        echo "Enabling ICMP Request..."; sleep 2
        firewall-cmd --permanent --zone=$zone --add-icmp-block-inversion
        firewall-cmd --permanent --add-icmp-block=echo-request
        firewall-cmd --reload

    }

        function dis_icmp {
        echo "Disabling ICMP Request..."; sleep 2
        firewall-cmd --permanent --zone=$zone --remove-icmp-block-inversion
        firewall-cmd --permanent --remove-icmp-block=echo-request
        firewall-cmd --reload
    }

                


    #4.) Add Whitelist IP
    function whitelist_ip {
        option=0
        until [ "$option" = "3" ]; do
        clear
        neofetch --color_blocks off
        echo ""
        echo "  1.) Add Whitelist IP [permanent]"
        echo "  2.) Add Whitelist IP [time interval]"
        echo "  3.) Back"
        echo ""
        echo -n "${bold}Enter choice [ 1 - 3 ]: ${end}"
        read option
        case $option in
            1 ) whitelist_ip_p ;;
            2 ) whitelist_ip_t ;;
            3 ) main_menu ;;
            * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
        esac
    done
    }  

        function whitelist_ip_p {
        read -p "Enter IP Address (eg: 192.168.1.101): " ipaddr
        firewall-cmd --zone=$zone --add-rich-rule="rule family="ipv4" source address="$ipaddr" accept"
        firewall-cmd --reload

        while true; do
            read -p "Would you like to add another IP [Yy/Nn]?: " yn
            case $yn in
                [Yy] ) whitelist_ip_p;;
                [Nn] ) whitelist_ip;;
                * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
            esac
        done
        }

        function whitelist_ip_t {
        read -p "Enter IP Address (eg: 192.168.1.101): " ipaddr
        read -p "Enter timeout (eg: 20m = 20 minutes, 2h = 2 hours): " timeval
        firewall-cmd --zone=$zone --add-rich-rule="rule family="ipv4" source address="$ipaddr" accept" --timeout=$timeval

        while true; do
            read -p "Would you like to add another IP [Yy/Nn]?: " yn
            case $yn in
                [Yy] ) whitelist_ip_t;;
                [Nn] ) whitelist_ip;;
                * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
            esac
        done
        }


    #5.) Add Blacklist IP
    function blacklist_ip {
        option=0
        until [ "$option" = "3" ]; do
        clear
        neofetch --color_blocks off
        echo ""
        echo "  1.) Add Blacklist IP [permanent]"
        echo "  2.) Add Blacklist IP [time interval]"
        echo "  3.) Back"
        echo ""
        echo -n "${bold}Enter choice [ 1 - 3 ]: ${end}"
        read option
        case $option in
            1 ) blacklist_ip_p ;;
            2 ) blacklist_ip_t ;;
            3 ) main_menu ;;
            * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
        esac
    done
    }  

        function blacklist_ip_p {
        read -p "Enter IP Address (eg: 192.168.1.101): " ipaddr
        firewall-cmd --zone=$zone --add-rich-rule="rule family="ipv4" source address="$ipaddr" drop"
        firewall-cmd --reload

        while true; do
            read -p "Would you like to add another IP [Yy/Nn]?: " yn
            case $yn in
                [Yy] ) blacklist_ip_p;;
                [Nn] ) blacklist_ip;;
                * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
            esac
        done
        }

        function blacklist_ip_t {
        read -p "Enter IP Address (eg: 192.168.1.101): " ipaddr
        read -p "Enter timeout (eg: 20m = 20 minutes, 2h = 2 hours): " timeval
        firewall-cmd --zone=$zone --add-rich-rule="rule family="ipv4" source address="$ipaddr" drop" --timeout=$timeval

        while true; do
            read -p "Would you like to add another IP [Yy/Nn]?: " yn
            case $yn in
                [Yy] ) blacklist_ip_t;;
                [Nn] ) blacklist_ip;;
                * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
            esac
        done
        }            

        #6.) Get Denied Logs"
    function get_logs {
        clear
        echo "No logs, your network connection is safe..."
        journalctl -f | grep --color="always" -En "(high-security|MAC=|SRC=|DST=|PROTO=|SPT=|DPT=)"
    } 


        #7.) Panic mode
    function panic_mode {
        option=0
        until [ "$option" = "3" ]; do
        clear
        neofetch --color_blocks off
        echo ""
        echo "  1.) ON Panic mode"
        echo "  2.) OFF Panic mode"
        echo "  3.) Back"
        echo ""
        echo -n "${bold}Enter choice [ 1 - 7 ]: ${end}"
        read option
        case $option in
            1 ) on_panic_mode ; pause ;;
            2 ) off_panic_mode ; pause ;;
            3 ) main_menu ;;
            * ) echo -e "${red}${bold}invalid option...${end}" && sleep 2
        esac
    done
    }  

        function on_panic_mode {
        echo "Tuning ON Panic mode..."; sleep 2
        firewall-cmd --panic-on
        firewall-cmd --reload

    }

        function off_panic_mode {
        echo "Tuning OFF Panic mode..."; sleep 2
        firewall-cmd --panic-off
        firewall-cmd --reload
    }


        #8.) Get Denied Logs"
    function info_zone {
        clear
        neofetch --color_blocks off
        echo ""
        
        firewall-cmd --get-default-zone
        firewall-cmd --get-active-zone
        firewall-cmd --info-zone=$zone
    }            
            
#infinite loop
while true
do

main_menu
done
